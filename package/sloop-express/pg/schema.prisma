datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator js {
  provider = "prisma-client-js"
  output   = "../node_modules/sloop-common/node_modules/@prisma/generated"

  binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

generator zod {
  provider                 = "zod-prisma-types"
  output                   = "../node_modules/sloop-common/prisma-generated/zod"
  prismaClientPath         = "@prisma/generated"
  createInputTypes         = false // default is true
  //createModelTypes                 = false // default is true
  addInputTypeValidation   = false // default is true
  addIncludeType           = false // default is true
  addSelectType            = false // default is true
  validateWhereUniqueInput = false // default is true
  // createOptionalDefaultValuesTypes = true // default is false
  // createRelationValuesTypes        = true // default is false
  // createPartialTypes               = true // default is false
}

//          unique, human-readble, constant, robot-friendly
//  slug    +       +                        +
//  name            ++              
//  id      +                      +

//
//AUTHENTIFICATION-RELATED
//
model User {
  id String @id @db.VarChar(21) //nanoid

  //Maybe Identifiable
  username  String? @unique
  slug      String?
  avatarUrl String?

  //Identifiable data
  confidential ConfidentialUser?

  //Relations
  invitedTo         MeetingInvitee[]  @relation("invitee")
  attendedTo        MeetingAttendee[] @relation("attendee")
  groupMembership   GroupMembership[]
  sessions          Session[]         @relation("session")
  principalSessions Session[]         @relation("principalSession")

  presided    MeetingPresider[] @relation("presidency")
  votingOwned Voting[]          @relation("votingOwner")

  sendMessages        MeetingMessage[] @relation("sentMessage")
  reportedMessages    MeetingMessage[] @relation("reportedMessage")
  concernedLogEntries UserLogEntry[]

  isAdmin Boolean

  coauthoredProposal ProposalCoauthor[] @relation("coauthors")
  authoredProposal   Proposal[]         @relation("author")

  copiedBy GroupCopy[] @relation("userCopied")
  copierOf GroupCopy[] @relation("userCopier")

  votes          VotingVote[]     @relation("userVote")
  copierVotes    VotingVote[]     @relation("copierVote")
  proposalUnseen ProposalUnseen[]
  voteUnseen     VotingUnseen[]
  meetingUnseen  MeetingUnseen[]
}

model ConfidentialUser {
  id     String @id @db.VarChar(21) //nanoid
  user   User   @relation(fields: [userId], references: [id])
  userId String @unique @db.VarChar(21)

  //TODO real name/address etc... ?
  email        String  @unique
  passwordHash String? //use argon2 salt is embedded in the hash
}

model Session {
  //Ids
  id String @id @db.VarChar(21) //nanoid

  //Values
  createdAt DateTime  @default(now())
  deletedAt DateTime?

  keepMeLoggedIn Boolean

  // confidential ConfidentialSession?

  //Relations
  //Most of the type userId === principalId for normal user, but admin can log as another user
  //in the principal/role logic
  // - userId and isAdmin are "roles", 
  userId               String                 @db.VarChar(21) //nanoid
  user                 User                   @relation("session", fields: [userId], references: [id])
  principalId          String?                @db.VarChar(21) //nanoid
  principal            User?                  @relation("principalSession", fields: [principalId], references: [id])
  isAdmin              Boolean
  accessTokenGenerated AccessTokenGenerated[]

  madeLogEntries LogEntry[]

  createdMeeting  Meeting[]    @relation("createdMeeting")
  createdProposal Proposal[]   @relation("createdProposal")
  createdVoting   Voting[]     @relation("createdVoting")
  createdVote     VotingVote[]
  startedVoting   Voting[]     @relation("startedVoting")
  endedVoting     Voting[]     @relation("endedVoting")
}

model AccessTokenGenerated {
  id        String          @id @db.VarChar(21) //nanoid
  sessionId String          @db.VarChar(21) //nanoid
  session   Session         @relation(fields: [sessionId], references: [id])
  createdAt DateTime        @default(now())
  reason    GeneratedReason
}

enum GeneratedReason {
  LOGIN
  REFRESH
}

model ProposalUnseen {
  id         String   @id @db.VarChar(21) //nanoid
  proposal   Proposal @relation(fields: [proposalId], references: [id])
  proposalId String   @db.VarChar(21) //nanoid
  group      Group    @relation(fields: [groupId], references: [id])
  groupId    String   @db.VarChar(21) //nanoid
  user       User     @relation(fields: [userId], references: [id])
  userId     String   @db.VarChar(21) //nanoid
}

model VotingUnseen {
  id       String @id @db.VarChar(21) //nanoid
  voting   Voting @relation(fields: [votingId], references: [id])
  votingId String @db.VarChar(21) //nanoid
  group    Group  @relation(fields: [groupId], references: [id])
  groupId  String @db.VarChar(21) //nanoid
  user     User   @relation(fields: [userId], references: [id])
  userId   String @db.VarChar(21) //nanoid
}

model MeetingUnseen {
  id        String  @id @db.VarChar(21) //nanoid
  meeting   Meeting @relation(fields: [meetingId], references: [id])
  meetingId String  @db.VarChar(21) //nanoid
  group     Group   @relation(fields: [groupId], references: [id])
  groupId   String  @db.VarChar(21) //nanoid
  user      User    @relation(fields: [userId], references: [id])
  userId    String  @db.VarChar(21) //nanoid
}

//
//MEETING-RELATED
//
model Meeting {
  id               String    @id @db.VarChar(21) //nanoid
  title            String
  slug             String
  description      String?
  location         String
  scheduledStartAt DateTime
  scheduledEndAt   DateTime
  actualStartAt    DateTime?
  actualEndAt      DateTime?

  createdBy   Session  @relation("createdMeeting", fields: [createdById], references: [id])
  createdById String   @db.VarChar(21) //nanoid
  createdAt   DateTime @default(now())

  presiders MeetingPresider[] @relation("presidency") //equivalent to owner

  currentAgendaPoint   PointAgenda?      @relation("currentAgendaPoint", fields: [currentAgendaPointId], references: [id])
  currentAgendaPointId String?           @unique @db.VarChar(21) //nanoid
  invitees             MeetingInvitee[]
  attendees            MeetingAttendee[]
  pointAgenda          PointAgenda[]
  logEntries           MeetingLogEntry[]
  group                Group             @relation(fields: [groupId], references: [id])
  groupId              String            @db.VarChar(21) //nanoid
  messages             MeetingMessage[]
  voting               Voting[]
  meetingUnseen        MeetingUnseen[]
}

// Convoqu√©s
model MeetingInvitee {
  id                   String           @id @db.VarChar(21) //nanoid
  user                 User             @relation("invitee", fields: [userId], references: [id])
  userId               String           @db.VarChar(21) //nanoid
  meeting              Meeting          @relation(fields: [meetingId], references: [id])
  meetingId            String           @db.VarChar(21) //nanoid
  invitationMailSentAt DateTime?
  email                String?
  invitedAs            String?
  attended             MeetingAttendee? @relation("attendeeInvited")
}

model MeetingPresider {
  id        String  @id @db.VarChar(21) //nanoid
  user      User    @relation("presidency", fields: [userId], references: [id])
  userId    String  @db.VarChar(21) //nanoid
  meeting   Meeting @relation("presidency", fields: [meetingId], references: [id])
  meetingId String  @db.VarChar(21) //nanoid
  role      String // President, Secretaire etc...
}

// Present at some point
model MeetingAttendee {
  id        String          @id @db.VarChar(21) //nanoid
  user      User            @relation("attendee", fields: [userId], references: [id])
  userId    String          @db.VarChar(21) //nanoid
  meeting   Meeting         @relation(fields: [meetingId], references: [id])
  meetingId String          @db.VarChar(21) //nanoid
  invited   MeetingInvitee? @relation("attendeeInvited", fields: [inviteeId], references: [id])
  inviteeId String?         @unique
  riseHand  Boolean
  firstSeen DateTime
}

model MeetingMessage {
  id            String       @id @db.VarChar(21) //nanoid
  fromUser      User         @relation("sentMessage", fields: [fromUserId], references: [id])
  fromUserId    String       @db.VarChar(21) //nanoid
  reportedBy    User         @relation("reportedMessage", fields: [reportedById], references: [id])
  reportedById  String       @db.VarChar(21) //nanoid
  meeting       Meeting      @relation(fields: [meetingId], references: [id])
  meetingId     String       @db.VarChar(21) //nanoid
  agendaPoint   PointAgenda? @relation(fields: [agendaPointId], references: [id])
  agendaPointId String?      @db.VarChar(21) //nanoid
  content       String
  parentId      String?      @db.VarChar(21) //nanoid
  createdAt     DateTime     @default(now())
  deletedAt     DateTime?
}

model PointAgenda {
  id             String           @id @db.VarChar(21) //nanoid
  name           String
  description    String?
  meeting        Meeting          @relation(fields: [meetingId], references: [id])
  meetingId      String           @db.VarChar(21) //nanoid
  children       PointAgenda[]    @relation("children")
  parent         PointAgenda?     @relation("children", fields: [parentId], references: [id])
  parentId       String?          @db.VarChar(21) //nanoid
  currentPointOf Meeting?         @relation("currentAgendaPoint")
  messages       MeetingMessage[]
  voting         Voting[]
}

//
// GROUP
//

model Group {
  id                     String            @id @db.VarChar(21) //nanoid
  name                   String
  slug                   String            @unique
  description            String?
  memberships            GroupMembership[]
  meetings               Meeting[]
  proposals              Proposal[]
  copies                 GroupCopy[]
  votings                Voting[]
  requireJoinValidation  Boolean
  requireLeaveValidation Boolean
  joinConditionMd        String //Markdown
  leaveConditionMd       String //Markdown

  //No owners owners are the captains 
  //owners    User[]
  proposalUnseen      ProposalUnseen[]
  voteUnseen          VotingUnseen[]
  meetingUnseen       MeetingUnseen[]
  concernedLogEntries GroupLogEntry[]
}

model GroupMembership {
  id             String              @id @db.VarChar(21) //nanoid
  role           GroupMembershipRole //captain, member, whatever we can think of...
  group          Group               @relation(fields: [groupId], references: [id])
  groupId        String              @db.VarChar(21) //nanoid
  user           User                @relation(fields: [userId], references: [id])
  userId         String              @db.VarChar(21) //nanoid
  startDate      DateTime
  expirationDate DateTime?

  votes       VotingVote[] @relation("userMembershipVote")
  copierVotes VotingVote[] @relation("copierMembershipVote")

  @@unique([groupId, userId, role, startDate])
}

enum GroupMembershipRole {
  CAPTAIN
  MEMBER
  //TODO CUSTOM ?
}

//
//DELEGATION-RELATED
//

model GroupCopy {
  id String @id @db.VarChar(21) //nanoid

  copier   User   @relation(name: "userCopier", fields: [copierId], references: [id])
  copierId String @db.VarChar(21) //nanoid
  copied   User   @relation(name: "userCopied", fields: [copiedId], references: [id])
  copiedId String @db.VarChar(21) //nanoid

  // filter String

  power Int // 100 is the maximum power

  group   Group  @relation(fields: [groupId], references: [id])
  groupId String @db.VarChar(21) //nanoid

  @@unique([copierId, copiedId, groupId])
}

model Proposal {
  id          String   @id @db.VarChar(21) //nanoid
  createdAt   DateTime @default(now())
  createdBy   Session  @relation(name: "createdProposal", fields: [createdById], references: [id])
  createdById String   @db.VarChar(21) //nanoid

  author    User               @relation("author", fields: [authorId], references: [id])
  authorId  String             @db.VarChar(21) //nanoid
  coauthors ProposalCoauthor[]

  name String
  slug String

  group     Group    @relation(fields: [groupId], references: [id])
  groupId   String   @db.VarChar(21) //nanoid
  putToVote Voting[] //Usually only one per proposal

  content String

  publishedAt DateTime?
  archivedAt  DateTime?

  unseen              ProposalUnseen[]
  concernedLogEntries ProposalLogEntry[]
}

model ProposalCoauthor {
  id                   String    @id @db.VarChar(21) //nanoid
  createdAt            DateTime  @default(now())
  proposal             Proposal  @relation(fields: [proposalId], references: [id])
  proposalId           String    @db.VarChar(21) //nanoid
  user                 User      @relation("coauthors", fields: [userId], references: [id])
  userId               String    @db.VarChar(21) //nanoid
  acceptedByCoauthorAt DateTime?
  acceptedByAuthorAt   DateTime?
}

//
// VOTING
//
enum VotingMethod {
  SINGLE_NAME //Un seul nom sur le bulletin, le plus vot√© gagne
  APPROVAL //Plusieurs noms sur le bulletin, le plus vot√© gagne
  JUGEMENT_MAJORITAIRE //Plusieurs noms sur le bulletin avec mention, celui avec la meilleure mention en medianne gagne
}

model Voting {
  id          String   @id @db.VarChar(21) //nano
  createdAt   DateTime @default(now())
  createdBy   Session  @relation(name: "createdVoting", fields: [createdById], references: [id])
  createdById String   @db.VarChar(21) //nanoid

  owners User[] @relation("votingOwner")

  name             String
  slug             String
  description      String
  scheduledStartAt DateTime
  actualStartAt    DateTime?
  scheduledEndAt   DateTime
  actualEndAt      DateTime?
  autoStartEnd     Boolean

  startedBySession   Session?       @relation(name: "startedVoting", fields: [startedBySessionId], references: [id])
  startedBySessionId String?        @db.VarChar(21) //nanoid
  endedBySession     Session?       @relation(name: "endedVoting", fields: [endedBySessionId], references: [id])
  endedBySessionId   String?        @db.VarChar(21) //nanoid
  choices            VotingChoice[]
  votingMethod       VotingMethod
  votingMethodParams Json
  votes              VotingVote[]

  proposal   Proposal? @relation(fields: [proposalId], references: [id])
  proposalId String?   @db.VarChar(21) //nanoid

  meeting       Meeting?       @relation(fields: [meetingId], references: [id])
  meetingId     String?        @db.VarChar(21) //nanoid
  agendaPoint   PointAgenda?   @relation(fields: [agendaPointId], references: [id])
  agendaPointId String?        @db.VarChar(21) //nanoid
  group         Group          @relation(fields: [groupId], references: [id])
  groupId       String         @db.VarChar(21) //nanoid
  unseen        VotingUnseen[]

  concernedLogEntries VotingLogEntry[]

  @@index([autoStartEnd, actualStartAt])
}

model VotingChoice {
  id          String            @id @db.VarChar(21) //nanoid
  name        String
  description String?
  ofVote      Voting[]
  scores      VotingVoteScore[]
}

//VotingVote as either scores or copied (delegated) bur not both
model VotingVote {
  id             String   @id @db.VarChar(21) //nanoid
  lastModifiedAt DateTime @updatedAt
  createdBy      Session  @relation(fields: [createdById], references: [id])
  createdById    String   @db.VarChar(21) //nanoid

  power Int // 100 is the maximum power

  ofVoting   Voting @relation(fields: [ofVotingId], references: [id])
  ofVotingId String @db.VarChar(21) //nanoid

  voter                  User            @relation("userVote", fields: [voterId], references: [id])
  voterId                String          @db.VarChar(21) //nanoid
  //A voter valid membership at the START of the vote is required
  validVoterMembership   GroupMembership @relation(name: "userMembershipVote", fields: [validVoterMembershipId], references: [id])
  validVoterMembershipId String          @db.VarChar(21) //nanoid

  copied                  User?            @relation("copierVote", fields: [copiedId], references: [id])
  copiedId                String?          @db.VarChar(21) //nanoid
  //A copied user valid membership at the START of the vote is required
  validCopiedMembership   GroupMembership? @relation("copierMembershipVote", fields: [validCopiedMembershipId], references: [id])
  validCopiedMembershipId String?          @db.VarChar(21) //nanoid

  scores VotingVoteScore[] //There should be one for each choice in the voting
}

model VotingVoteScore {
  id String @id @db.VarChar(21) //nanoid

  ofVote      VotingVote   @relation(fields: [ofVoteId], references: [id])
  ofVoteId    String       @db.VarChar(21) //nanoid
  forChoice   VotingChoice @relation(fields: [forChoiceId], references: [id])
  forChoiceId String       @db.VarChar(21) //nanoid
  score       String
}

//
// LOGGING
//
model ProposalLogEntry {
  id String @id @db.VarChar(21) //maybe useless ? //nanoid

  proposal   Proposal @relation(fields: [proposalId], references: [id])
  proposalId String   @db.VarChar(21) //nanoid

  entry   LogEntry @relation(fields: [entryId], references: [id])
  entryId String   @db.VarChar(21) //nanoid

  @@index([proposalId])
}

model GroupLogEntry {
  id String @id @db.VarChar(21) //maybe useless ? //nanoid

  group   Group  @relation(fields: [groupId], references: [id])
  groupId String @db.VarChar(21) //nanoid

  entry   LogEntry @relation(fields: [entryId], references: [id])
  entryId String   @db.VarChar(21) //nanoid

  @@index([groupId])
}

model VotingLogEntry {
  id String @id @db.VarChar(21) //maybe useless ? //nanoid

  voting   Voting @relation(fields: [votingId], references: [id])
  votingId String @db.VarChar(21) //nanoid

  entry   LogEntry @relation(fields: [entryId], references: [id])
  entryId String   @db.VarChar(21) //nanoid

  @@index([votingId])
}

model MeetingLogEntry {
  id String @id @db.VarChar(21) //maybe useless ? //nanoid

  meeting   Meeting @relation(fields: [meetingId], references: [id])
  meetingId String  @db.VarChar(21) //nanoid

  entry   LogEntry @relation(fields: [entryId], references: [id])
  entryId String   @db.VarChar(21) //nanoid

  @@index([meetingId])
}

model UserLogEntry {
  id String @id @db.VarChar(21) //maybe useless ? //nanoid

  user   User   @relation(fields: [userId], references: [id])
  userId String @db.VarChar(21) //nanoid

  entry   LogEntry @relation(fields: [entryId], references: [id])
  entryId String   @db.VarChar(21) //nanoid

  @@index([userId])
}

model LogEntry {
  id       String   @id @db.VarChar(21) //nanoid
  doneAt   DateTime @default(now())
  doneBy   Session  @relation(fields: [doneById], references: [id])
  doneById String   @db.VarChar(21) //nanoid

  type String
  data Json

  concernedUsers     UserLogEntry[]
  concernedMeetings  MeetingLogEntry[]
  concernedVotings   VotingLogEntry[]
  concernedGroups    GroupLogEntry[]
  concernedProposals ProposalLogEntry[]
}
